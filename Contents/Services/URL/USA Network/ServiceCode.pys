VIDEOS_URL = 'http://tveatc-usa.nbcuni.com/awe3/live/5/usa/containers/iPadRetina/%s'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	(show_id, video_id) = url.split('://')[-1].split('/')

	show = None
	subtype = 'episode'
	season = None
	index = None

	found_episode = False

	for episode in JSON.ObjectFromURL(VIDEOS_URL % show_id)['results']:

		if episode['assetID'].endswith(video_id):

			show = episode['parentContainerTitle']
			subtype = episode['subtype']
			season = episode['seasonNumber'] if 'seasonNumber' in episode else None
			index = episode['episodeNumber'] if 'episodeNumber' in episode else None
			title = episode['title']
			summary = episode['description']
			duration = episode['totalDuration']
			originally_available_at = Datetime.FromTimestamp(episode['firstAiredDate']).date()

			try:
				thumb = episode['images'][0]['images']['video_thumbnail_16_by_9']
			except:
				thumb = ''

			found_episode = True
			break

	if not found_episode:
		raise Ex.MediaNotAvailable

	if show and season and index and subtype == 'episode':

		return EpisodeObject(
			show = show,
			season = int(season),
			index = int(index),
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = originally_available_at
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '720',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	(show_id, video_id) = url.split('://')[-1].split('/')
	found_episode = False

	for episode in JSON.ObjectFromURL(VIDEOS_URL % show_id)['results']:

		if episode['assetID'].endswith(video_id):

			m3u8_url = episode['videoURL']

			try:
				m3u8 = HTTP.Request(m3u8_url, cacheTime=10, follow_redirects=False).content
			except Ex.RedirectError, e:
				if 'Location' in e.headers:
					m3u8_url = e.headers['Location']
			except Ex.HTTPError, e:
				if e.code == 403:
					raise Ex.MediaGeoblocked
				elif e.code == 404:
					raise Ex.MediaNotAvailable
				else:
					raise Ex.MediaNotAvailable
			except:
				raise Ex.MediaNotAvailable

			return IndirectResponse(VideoClipObject,
				key = HTTPLiveStreamURL(m3u8_url)
			)

	raise Ex.MediaNotAvailable
